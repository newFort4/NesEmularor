using System;
using System.Drawing;
using System.Linq;
using System.Threading;
using NesEmulator.Core;

var game = new byte[]
{
    0x20, 0x06, 0x06, 0x20, 0x38, 0x06, 0x20, 0x0d, 0x06, 0x20, 0x2a, 0x06, 0x60, 0xa9, 0x02, 0x85,
    0x02, 0xa9, 0x04, 0x85, 0x03, 0xa9, 0x11, 0x85, 0x10, 0xa9, 0x10, 0x85, 0x12, 0xa9, 0x0f, 0x85,
    0x14, 0xa9, 0x04, 0x85, 0x11, 0x85, 0x13, 0x85, 0x15, 0x60, 0xa5, 0xfe, 0x85, 0x00, 0xa5, 0xfe,
    0x29, 0x03, 0x18, 0x69, 0x02, 0x85, 0x01, 0x60, 0x20, 0x4d, 0x06, 0x20, 0x8d, 0x06, 0x20, 0xc3,
    0x06, 0x20, 0x19, 0x07, 0x20, 0x20, 0x07, 0x20, 0x2d, 0x07, 0x4c, 0x38, 0x06, 0xa5, 0xff, 0xc9,
    0x77, 0xf0, 0x0d, 0xc9, 0x64, 0xf0, 0x14, 0xc9, 0x73, 0xf0, 0x1b, 0xc9, 0x61, 0xf0, 0x22, 0x60,
    0xa9, 0x04, 0x24, 0x02, 0xd0, 0x26, 0xa9, 0x01, 0x85, 0x02, 0x60, 0xa9, 0x08, 0x24, 0x02, 0xd0,
    0x1b, 0xa9, 0x02, 0x85, 0x02, 0x60, 0xa9, 0x01, 0x24, 0x02, 0xd0, 0x10, 0xa9, 0x04, 0x85, 0x02,
    0x60, 0xa9, 0x02, 0x24, 0x02, 0xd0, 0x05, 0xa9, 0x08, 0x85, 0x02, 0x60, 0x60, 0x20, 0x94, 0x06,
    0x20, 0xa8, 0x06, 0x60, 0xa5, 0x00, 0xc5, 0x10, 0xd0, 0x0d, 0xa5, 0x01, 0xc5, 0x11, 0xd0, 0x07,
    0xe6, 0x03, 0xe6, 0x03, 0x20, 0x2a, 0x06, 0x60, 0xa2, 0x02, 0xb5, 0x10, 0xc5, 0x10, 0xd0, 0x06,
    0xb5, 0x11, 0xc5, 0x11, 0xf0, 0x09, 0xe8, 0xe8, 0xe4, 0x03, 0xf0, 0x06, 0x4c, 0xaa, 0x06, 0x4c,
    0x35, 0x07, 0x60, 0xa6, 0x03, 0xca, 0x8a, 0xb5, 0x10, 0x95, 0x12, 0xca, 0x10, 0xf9, 0xa5, 0x02,
    0x4a, 0xb0, 0x09, 0x4a, 0xb0, 0x19, 0x4a, 0xb0, 0x1f, 0x4a, 0xb0, 0x2f, 0xa5, 0x10, 0x38, 0xe9,
    0x20, 0x85, 0x10, 0x90, 0x01, 0x60, 0xc6, 0x11, 0xa9, 0x01, 0xc5, 0x11, 0xf0, 0x28, 0x60, 0xe6,
    0x10, 0xa9, 0x1f, 0x24, 0x10, 0xf0, 0x1f, 0x60, 0xa5, 0x10, 0x18, 0x69, 0x20, 0x85, 0x10, 0xb0,
    0x01, 0x60, 0xe6, 0x11, 0xa9, 0x06, 0xc5, 0x11, 0xf0, 0x0c, 0x60, 0xc6, 0x10, 0xa5, 0x10, 0x29,
    0x1f, 0xc9, 0x1f, 0xf0, 0x01, 0x60, 0x4c, 0x35, 0x07, 0xa0, 0x00, 0xa5, 0xfe, 0x91, 0x00, 0x60,
    0xa6, 0x03, 0xa9, 0x00, 0x81, 0x10, 0xa2, 0x00, 0xa9, 0x01, 0x81, 0x10, 0x60, 0xa2, 0x00, 0xea,
    0xea, 0xca, 0xd0, 0xfb, 0x60
};

var cpu = new CPU();

cpu.Load(game);
cpu.Reset();

var random = new Random();
var screenState = Enumerable
    .Range(0, 32 * 3 * 32)
    .Select(x => (byte) x)
    .ToArray();

cpu.RunWithCallback(cpu =>
{
    ReadInput();

    cpu.WriteMemory(0xFE, (byte)(1 + (random.Next() % 15)));

    if (ShouldUpdateScreen(cpu, screenState))
    {
        PresentScreen();
    }

    Thread.Sleep(TimeSpan.FromMilliseconds(0.7));
});

void ReadInput()
{
    const ushort keyAddress = 0xFF;

    if (Console.KeyAvailable)
    {
        var consoleKey = Console.ReadKey().Key;

        switch (consoleKey)
        {
            case ConsoleKey.W:
                cpu.WriteMemory(keyAddress, 0x77);
                break;
            case ConsoleKey.A:
                cpu.WriteMemory(keyAddress, 0x61);
                break;
            case ConsoleKey.S:
                cpu.WriteMemory(keyAddress, 0x73);
                break;
            case ConsoleKey.D:
                cpu.WriteMemory(keyAddress, 0x64);
                break;
            default:
                break;
        }
    }
}

ConsoleColor GetColor(byte data)
{
    switch (data)
    {
        case 0:
            return ConsoleColor.Black;
        case 1:
            return ConsoleColor.White;
        case 2: case 9:
            return ConsoleColor.DarkGray;
        case 3: case 10:
            return ConsoleColor.Red;
        case 4:
        case 11:
            return ConsoleColor.Green;
        case 5:
        case 12:
            return ConsoleColor.Blue;
        case 6:
        case 13:
            return ConsoleColor.Magenta;
        case 7:
        case 14:
            return ConsoleColor.Yellow;
        default:
            return ConsoleColor.Cyan;
    }
}

(byte, byte, byte) ConsoleColorToRgb(ConsoleColor consoleColor)
{
    var color = Color.FromName(Enum.GetName(consoleColor));

    return (color.R, color.G, color.B);
}

ConsoleColor RgbToConsoleColor(byte r, byte g, byte b)
{
    var index = (r > 128 | g > 128 | b > 128) ? 8 : 0;
        index |= (r > 64) ? 4 : 0;
        index |= (g > 64) ? 2 : 0;
        index |= (b > 64) ? 1 : 0;

    return (ConsoleColor)index;
}

bool ShouldUpdateScreen(CPU cpu, byte[] frame)
{
    var frameIdx = 0;
    var shouldUpdate = false;

    for (var i = (ushort)0x0200; i < 0x0600; i++)
    {
        var colorIdx = cpu.ReadMemory(i);
        var (r, g, b) = ConsoleColorToRgb(GetColor(colorIdx));

        if (frame[frameIdx] != r || frame[frameIdx + 1] != g || frame[frameIdx + 2] != b)
        {
            frame[frameIdx] = r;
            frame[frameIdx + 1] = g;
            frame[frameIdx + 2] = b;

            shouldUpdate = true;
        }

        frameIdx += 3;
    }

    return shouldUpdate;
}

void PresentScreen()
{
    Console.Clear();

    for (var i = 0; i < screenState.Length; i += 3)
    {
        Console.ForegroundColor = RgbToConsoleColor(screenState[i], screenState[i + 1], screenState[i + 2]);
        Console.Write('x');

        if (((i / 3) + 1) % 32 == 0)
        {
            Console.WriteLine();
        }
    }

    Console.ResetColor();
}